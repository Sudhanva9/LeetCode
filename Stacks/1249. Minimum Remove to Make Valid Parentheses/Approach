Given a string s of '(' , ')' and lowercase English characters.
Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.
Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 
Example 1:
Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.

Example 2:
Input: s = "a)b(c)d"
Output: "ab(c)d"

Example 3:
Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.

Constraints:

1 <= s.length <= 105
s[i] is either '(' , ')', or lowercase English letter.
______________________________________________________

SOLTIONS

1. Either we have a surplus of '(' or ')'. Use a counter to track the open and close parentheses starting at 0.
    - '(' : +1  ||||   ')' : -1
2. If extra ")": skip it: Get the resulting array: arr.
3. If extra "(": We remove them from the end by Reversing the 'arr' to 'res'.
4. Now, reverse back the array 'res' and convert it to String and return that String.

TIME: O(n)
SPACE: O(n)
