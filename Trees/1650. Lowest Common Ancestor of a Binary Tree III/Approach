Given two nodes of a binary tree p and q, return their lowest common ancestor (LCA).
Each node will have a reference to its parent node. The definition for Node is below:

class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: "The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself)."

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.

Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

__________________________________________________________

SOLUTION

          3
      /      \
    5            1
  /   \        /   \
6      2      0     8
      /  \
    7     4

p = 4, q = 8 | O/P = 3

                        q
                        |
p_copy : 4  2  5  3  N  8  1  |3|
q_copy : 8  1  3  N  4  2  5  |3|
                     |
                     p

1. We got to parent of 'p' and 'q'.
2. When the parents are equal, that is the LCA.
3. Some times the heights for p and q will be different.
    - In that case, go to the parents of p and q untill it reaches null
    - Then swap the values of p_copy to q and q_copy to p: This will ensure the final height is equal and when they become equal, we can return it.

TIME: O(log n)
SPACE: O(1)
