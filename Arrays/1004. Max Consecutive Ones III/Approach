Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

Example 1:
Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:
Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.
0 <= k <= nums.length
_________________________________________

SOLUTION

SLIDING WINDOW: 

1. Use two pointers (l and r) to create a sliding window.
2. Expand the right pointer (r) and count the number of zeros in the window.
3. If the number of zeros exceeds k, shrink the window from the left (l).
4. Move the left pointer (l) until the number of zeros is within the allowed limit.
5. Keep track of the maximum window size encountered.
6. Return the maximum window size at the end.

TIME: O(n)
SPACE: O(1)
