Given an integer array nums and an integer k, return true if nums has a good subarray or false otherwise.
A good subarray is a subarray where:
its length is at least two, and
the sum of the elements of the subarray is a multiple of k.
Note that:
A subarray is a contiguous part of the array.
An integer x is a multiple of k if there exists an integer n such that x = n * k. 0 is always a multiple of k.

Example 1:
Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.

Example 2:
Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.
42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.

Example 3:
Input: nums = [23,2,6,4,7], k = 13
Output: false

Constraints:
1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= sum(nums[i]) <= 231 - 1
1 <= k <= 231 - 1
_________________________________________________

SOLUTION

HASHMAP:

1. Create a HashMap to store remainders of the cumulative sum when divided by k.
2. nitialize the HashMap with {0, -1} to handle edge cases.
3. Traverse the array while maintaining a cumulative sum.
4. Compute the remainder of the cumulative sum when divided by k.
5. If the remainder is not in the HashMap, store it with the current index.
6. If the remainder exists and the subarray length is at least 2, return true.
7. If no valid subarray is found, return false.

TIME: O(n)
SPACE: O(n)
