Given the root of a complete binary tree, return the number of the nodes in the tree.
According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
Design an algorithm that runs in less than O(n) time complexity.

Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [1]
Output: 1

Constraints:
The number of nodes in the tree is in the range [0, 5 * 104].
0 <= Node.val <= 5 * 104
The tree is guaranteed to be complete.
______________________________________________

SOLUTION

1. Use recursion to count the total number of nodes in the binary tree.
2. If the current node is null, return 0 (base case).
3. Otherwise, count the current node as 1.
4. Recursively count the nodes in the left subtree.
5. Recursively count the nodes in the right subtree.
6. Add them all together and return the total count.

TIME: O(n)
SPACE: O(h)
