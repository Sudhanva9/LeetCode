Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.

Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

Constraints:
The number of nodes in the tree is in the range [0, 105].
-1000 <= Node.val <= 1000
_______________________________________

SOLUTION

1. Use a recursive function to find the minimum depth of the binary tree.
2. If the current node is null, return 0 (base case).
3. If the left child is null, calculate depth only through the right subtree.
4. If the right child is null, calculate depth only through the left subtree.
5. If both children exist, calculate the minimum of the left and right subtree depths.
6. Add 1 at each step to account for the current node.
7. Start the recursion from the root and return the result.

TIME: O(n)
SPACE: O(n)
