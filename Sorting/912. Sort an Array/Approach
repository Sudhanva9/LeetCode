Given an array of integers nums, sort the array in ascending order and return it.
You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

Example 1:
Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).

Example 2:
Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.

Constraints:

1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104
__________________________________________________________

SOLUTION

MERGE SORT - 

1. Divide the Array (Recursive Step):
    Use Merge Sort, which follows the divide and conquer approach.
    Recursively divide the array into two halves until each half contains only one element.
    This is done using mergeSort(arr, l, m) and mergeSort(arr, m + 1, r), where m = (l + r) / 2.
2. Merge the Sorted Halves:
      After sorting both halves, merge them back into a single sorted array using the merge() function.
        Use two pointers:
        i for the left half (l to m).
        j for the right half (m + 1 to r).
      Compare elements from both halves and insert the smaller one into a temporary list.
3. Handle Remaining Elements:
    If any elements are left in the left half (i <= m), add them to the temporary list.
    If any elements are left in the right half (j <= r), add them as well.
4. Copy Merged Elements Back:
    Copy the sorted elements from the temporary list back into the original array (arr[]).


TIME: O(n log n)
SPACE: O(n)
