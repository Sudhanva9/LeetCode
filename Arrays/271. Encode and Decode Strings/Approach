Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:

string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:
string encoded_string = encode(strs);

and Machine 2 does:
vector<string> strs2 = decode(encoded_string);
strs2 in Machine 2 should be the same as strs in Machine 1.

Implement the encode and decode methods.
You are not allowed to solve the problem using any serialize methods (such as eval).

Example 1:

Input: dummy_input = ["Hello","World"]
Output: ["Hello","World"]
Explanation:
Machine 1:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 1 ---msg---> Machine 2

Machine 2:
Codec decoder = new Codec();
String[] strs = decoder.decode(msg);
Example 2:

Input: dummy_input = [""]
Output: [""]

______________________________________________________________________________


SOLUTION

Example:

strs: "mind", "games"

ENCODE:

1. Declare a new Srting.
2. For all the strings in the given list of strings
      Add: i) Length of the string (int) - Converted to String.
           ii) A delimiter "#".
           iii) The string itself.
3. Return the resulted string.

res: 4#mind5#games

DECODE:

1. Declare a new list for strings and a counter 'i' to tell us what position we are at in the String.
2. Now, iterate character by character.
    while(i < len(str)) {
      j = 1

      while(str charAt(j) != '#') {
        j++;
      }

      The 'length' of the srting is starting from index 'i' all the way to index 'j' (but not including index j) -> Convert to Int.

      res.append(str[j + 1 : j + 1 + length])
      i = j + 1 + length
3. Return the result.

str: "mind", "games"






























