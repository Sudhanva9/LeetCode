Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.
A leaf is a node with no children.

Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There are two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.

Example 3:
Input: root = [], targetSum = 0
Output: false
Explanation: Since the tree is empty, there are no root-to-leaf paths.

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000
_______________________________________________________________

SOLUTION

METHOD 1 : targetSum - root value

1. If the tree is empty (root == null), return false.
2. If the node is a leaf (no left or right child), check if its value equals targetSum. If yes, return true; otherwise, return false.
3. Recursively check the left and right subtrees, subtracting the current node's value from targetSum.
4. If either the left or right subtree has a valid path, return true. Otherwise, return false.

METHOD 2 : targetSum = currentSum

1. Start from the root and call the dfs function with curSum = 0.
2. If the current node is null, return false (base case).
3. Add the current nodeâ€™s value to curSum.
4. If the node is a leaf (no left or right child), check if curSum == targetSum.
    If yes, return true.
    Otherwise, return false.
5. Recursively check the left and right subtrees.
6. If either subtree finds a valid path, return true.
7. If both fail, return false (backtracking).


TIME: O(n)
SPACE: O(n)
