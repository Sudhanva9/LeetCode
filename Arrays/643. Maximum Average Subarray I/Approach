You are given an integer array nums consisting of n elements, and an integer k.
Find a contiguous subarray whose length is equal to k that has the maximum average value and return this value. Any answer with a calculation error less than 10-5 will be accepted.

Example 1:
Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75

Example 2:
Input: nums = [5], k = 1
Output: 5.00000

Constraints:
n == nums.length
1 <= k <= n <= 105
-104 <= nums[i] <= 104
______________________________________________

SOLUTION

1. Initialize the first window:
    Compute the sum of the first k elements in the array.
    This sum represents the sum of the first window of size k.
2. Use a sliding window to update the sum:
    Iterate from index k to the end of the array.
  In each step:
    Add the new element (nums[i]).
    Remove the leftmost element of the previous window (nums[i - k]).
This keeps the window size constant at k.
3. Track the maximum sum:
    Keep updating maxSum whenever a higher sum is found.
4. Return the maximum average:
    Divide maxSum by k to get the maximum average.

TIME: O(n)
SPACE: O(1)
