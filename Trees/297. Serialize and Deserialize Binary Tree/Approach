Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.
Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.
Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.

Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000
________________________________________________________

SOLUTION

Add each node value to a string to Serialize.
We can use a delimiter "," to separate each of the string value.
To handle null nodes, add an "N" to the Array List.

Using Preorder DFS, traverse through the given tree and add the values to the result.
Using Preorder DFS and an index-
  Create nodes for valid values.
  Return if null is encountered.

1. Serialization (Convert Tree → String)
    Traverse the tree in preorder (root → left → right).
    If a node is null, add "N" to the result.
    Otherwise, add the node’s value to the result.
    Finally, store values as a comma-separated string.

2. Deserialization (Convert String → Tree)
    Split the comma-separated string into an array.
    Rebuild the tree using DFS:
    Read the next value from the array.
    If it's "N", return null (no node).
    Otherwise, create a new node with the value.
    Recursively construct left and right subtrees.

TIME: O(n)
SPACE: O(n)
