Given the root of a binary tree, determine if it is a valid binary search tree (BST).
A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1
_____________________________________________

SOLUTION

DFS - 

1. Start at the root node and check if it follows the BST property.
2. Use a helper function valid(node, left, right) to check if the current node's value is within the valid range (left < node.val < right).
3. If the node is null, return true (base case).
4. If the node's value is not within the allowed range, return false.
5. Recursively check the left subtree, ensuring all values are less than the current node.
6. Recursively check the right subtree, ensuring all values are greater than the current node.
7. If both left and right subtrees are valid, return true.

TIME: O(n)
SPACE: O(n)
