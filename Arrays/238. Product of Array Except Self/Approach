Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The input is generated such that answer[i] is guaranteed to fit in a 32-bit integer.

Follow up: Can you solve the problem in O(1) extra space complexity? (The output array does not count as extra space for space complexity analysis.)
________________________________________________________________

SOLUTION

Example: 
nums: [1, 2, 3, 4] 

Prefix -
1. Declare a new result o/p array with size equal to nums.
2. Initialize Prefix to 1, assuming the first element has a prefix of 1.
3. Iterating through all the elements in nums array, 
    - assign prefix value to the result element.
    - multiply prefix with current element in the nums array.
Postfix - 
4. Initialize Postfix to 1, assuming the last element has a Postfix of 1.
5. Iterating through all the elements in nums array from right to left,
    - multiply the res[i] value with Postfix.
    - multiply postfix value with current element in the nums array.
6. Return the result array.

TIME: O(n)
SPACE: O(1) since the output array is excluded from space analysis.
