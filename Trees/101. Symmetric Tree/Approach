Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100

Follow up: Could you solve it both recursively and iteratively?

_______________________________________________________

SOLUTION

RECURSION -

1. A tree is symmetric if the left and right subtrees are mirror images.
2. Call the helper function isMirror(root, root) to check symmetry.
3. In isMirror(t1, t2):
      If both nodes are null, return true (they are symmetric).
      If only one is null, return false (they are not symmetric).
      Check if t1.val is equal to t2.val.
      Recursively compare t1.left with t2.right and t1.right with t2.left.
4. If all checks pass, return true, otherwise return false.

TIME: O(n)
SPACE: O(n)
