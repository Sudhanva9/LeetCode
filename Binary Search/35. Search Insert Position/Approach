Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104
___________________________________

SOLUTION

1. Use binary search to find the target or its correct position.
2. Set l (left) at the beginning of the array and r (right) at the end.
3. While l is less than or equal to r:
    Find the middle index mid.
    If nums[mid] is less than the target, move the left pointer to mid + 1.
    Otherwise, move the right pointer to mid - 1.
4. When the loop ends, l will be the correct position to insert the target.
5. Return l.

TIME: O(log n)
SPACE: O(1)
