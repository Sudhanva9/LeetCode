There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.
Given the two integers m and n, return the number of possible unique paths that the robot can take to reach the bottom-right corner.
The test cases are generated so that the answer will be less than or equal to 2 * 109.

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
 
Constraints:
1 <= m, n <= 100
________________________________________

SOLUTION

1. Create a 1D array rows of size n and fill it with 1s.
2. Iterate from the second last row (m - 2) up to the first row.
3. For each row, update rows[j] by adding the value from rows[j + 1], which represents the number of ways to reach the bottom-right cell.
4. This uses dynamic programming to store and update the number of unique paths efficiently.
5. The final result is stored in rows[0], representing the number of unique paths from the top-left corner.

TIME: O(m * n)
SPACE: O(n)
