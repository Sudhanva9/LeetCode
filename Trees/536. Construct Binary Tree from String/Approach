You need to construct a binary tree from a string consisting of parenthesis and integers.
The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.
You always start to construct the left child node of the parent first if it exists.

Example 1:
Input: s = "4(2(3)(1))(6(5))"
Output: [4,2,6,3,1,5]

Example 2:
Input: s = "4(2(3)(1))(6(5)(7))"
Output: [4,2,6,3,1,5,7]

Example 3:
Input: s = "-4(2(3)(1))(6(5)(7))"
Output: [-4,2,6,3,1,5,7]

Constraints:

0 <= s.length <= 3 * 104
s consists of digits, '(', ')', and '-' only.
All numbers in the tree have value at most than 230.
________________________________________________

SOLUTION

STACK:

1. Use a stack to help build the binary tree from the string representation.
2. Iterate through the string character by character:
    If the character is ')', pop a node from the stack and attach it as a left or right child of the node on top of the stack.
    If the character is '-', set a flag to indicate that the upcoming number is negative.
    If the character is '(', simply move to the next character.
    If it's a digit, build the number and push a new tree node onto the stack.
3. At the end, return the root of the tree, which is the last remaining node in the stack.

TIME: O(n)
SPACE: O(n)
