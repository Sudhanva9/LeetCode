Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.
Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
Example 2:

Input: nums = [0,1,1]
Output: []
Explanation: The only possible triplet does not sum up to 0.
Example 3:

Input: nums = [0,0,0]
Output: [[0,0,0]]
Explanation: The only possible triplet sums up to 0.

Constraints:

3 <= nums.length <= 3000
-105 <= nums[i] <= 105
____________________________________________________

SOLUTION

TWO POINTERS - 

-3, -3, 1, 2, 3, 4
 |   |  |        |
 i   L  L        R

We want to eleminate the duplicate values.

1. Start with sorting the input array.
2. If we have visited the same number previously, we'll skip it (continue) to avoid duplicate caluclation.
3. Once we are on a number, we need to find the sum of 2 more numbers. For the sum of other two numbers, we can use Left and Right pointers and the method of TwoSum II.
3. We'll be iterating over the 'nums' array and in a nested loop (implements TwoSum II), we'll use Left and Right pointers to get the sum of other two numbers.
4. If the sum of i, L, and R is > 0 : Decrement R by 1.
   If the sum is < 0 : Increment the L by 1.
   If the sum = 0 : 
      1. Return the indices of i, L, and R.
      2. For the next iteration, increment the L by 1.
      3. Iterating again, if the nums[L] == nums[L - 1] AND L < R:
          - We have to skip the duplicate element by incrementing the L by 1.
5. Return the result.


TIME: O(n^2)
SPACE: O(1)









