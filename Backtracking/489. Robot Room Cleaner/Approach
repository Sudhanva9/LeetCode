You are controlling a robot that is located somewhere in a room. The room is modeled as an m x n binary grid where 0 represents a wall and 1 represents an empty slot.
The robot starts at an unknown location in the room that is guaranteed to be empty, and you do not have access to the grid, but you can move the robot using the given API Robot.
You are tasked to use the robot to clean the entire room (i.e., clean every empty cell in the room). The robot with the four given APIs can move forward, turn left, or turn right. Each turn is 90 degrees.
When the robot tries to move into a wall cell, its bumper sensor detects the obstacle, and it stays on the current cell.
Design an algorithm to clean the entire room using the following APIs:
interface Robot {
  // returns true if next cell is open and robot moves into the cell.
  // returns false if next cell is obstacle and robot stays on the current cell.
  boolean move();
  // Robot will stay on the same cell after calling turnLeft/turnRight.
  // Each turn will be 90 degrees.
  void turnLeft();
  void turnRight();
  // Clean the current cell.
  void clean();
}
Note that the initial direction of the robot will be facing up. You can assume all four edges of the grid are all surrounded by a wall.

Custom testing:
The input is only given to initialize the room and the robot's position internally. You must solve this problem "blindfolded". In other words, you must control the robot using only the four mentioned APIs without knowing the room layout and the initial robot's position.

Example 1:
Input: room = [[1,1,1,1,1,0,1,1],[1,1,1,1,1,0,1,1],[1,0,1,1,1,1,1,1],[0,0,0,1,0,0,0,0],[1,1,1,1,1,1,1,1]], row = 1, col = 3
Output: Robot cleaned all rooms.
Explanation: All grids in the room are marked by either 0 or 1.
0 means the cell is blocked, while 1 means the cell is accessible.
The robot initially starts at the position of row=1, col=3.
From the top left corner, its position is one row below and three columns right.

Example 2:
Input: room = [[1]], row = 0, col = 0
Output: Robot cleaned all rooms.
 
Constraints:
m == room.length
n == room[i].length
1 <= m <= 100
1 <= n <= 200
room[i][j] is either 0 or 1.
0 <= row < m
0 <= col < n
room[row][col] == 1
All the empty cells can be visited from the starting position.
_________________________________________________

SOLUTION

1. The robot needs to clean every reachable cell in a room.
2. It can only move forward, turn left or right (90 degrees), and clean the current cell.
3. The room is like a grid, but the robot doesn’t know the layout in advance.
4. We use depth-first search (DFS) to explore every possible direction.
5. A set is used to keep track of visited positions so the robot doesn't go in circles.
6. The robot starts at position (0, 0), facing "up" (top).
7. From each cell, the robot:
      Cleans the current cell.
      Tries to move in all 4 directions (top, right, bottom, left), one by one.
      If the next cell hasn’t been visited and the move is possible, it recursively continues DFS from that cell.
8. After visiting a direction, it goes back to the original cell and direction using the goBack() method.
9. goBack() turns the robot 180 degrees, moves it back one step, and turns it back to its original direction.
10. The robot turns right after every direction attempt to cover all 4 directions properly.


TIME: O(N * M)
SPACE: O(N * M)
