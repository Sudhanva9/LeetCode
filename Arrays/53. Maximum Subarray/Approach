Given an integer array nums, find the subarray with the largest sum, and return its sum.

Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.

Example 2:
Input: nums = [1]
Output: 1
Explanation: The subarray [1] has the largest sum 1.

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23
Explanation: The subarray [5,4,-1,7,8] has the largest sum 23.

Constraints:
1 <= nums.length <= 105
-104 <= nums[i] <= 104
______________________________________

SOLUTION: 

KADANE'S ALGORITHM:

1. Start with curSum = 0 and maxSum as the first element of the array.
2. Iterate through each number in the array.
3. If curSum is negative, reset it to 0 (because a negative sum won't help maximize the subarray).
4. Add the current number to curSum.
5. Update maxSum with the maximum of maxSum and curSum.
6. Return maxSum as the largest sum of any contiguous subarray.

TIME: O(n)
SPACE: O(1)

SLIDING WINDOW: 

1. Initialize curSum to track the current subarray sum and maxSum to store the maximum sum found.
2. Use two pointers: l (left) and r (right) to iterate through the array.
3. If curSum becomes negative, reset it to 0 and update l to r (new subarray start).
4. Add the current element nums[r] to curSum.
5. Update maxSum with the maximum value found so far.
6. Return maxSum as the largest subarray sum.

TIME: O(n)
SPACE: O(1)
