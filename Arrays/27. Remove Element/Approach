Given an integer array nums and an integer val, remove all occurrences of val in nums in-place. The order of the elements may be changed. Then return the number of elements in nums which are not equal to val.
Consider the number of elements in nums which are not equal to val be k, to get accepted, you need to do the following things:
Change the array nums such that the first k elements of nums contain the elements which are not equal to val. The remaining elements of nums are not important as well as the size of nums.
Return k.

Custom Judge:
The judge will test your solution with the following code:

int[] nums = [...]; // Input array
int val = ...; // Value to remove
int[] expectedNums = [...]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums[i] == expectedNums[i];
}
If all assertions pass, then your solution will be accepted.

Example 1:

Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2,_,_]
Explanation: Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).
Example 2:

Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3,_,_,_]
Explanation: Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).
 
Constraints:

0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100
____________________________________________________________________________________________________________________


SOLUTION:

/-- NOTE --/
Whenever there is a constraint of operating the array "in-place", we can use "Two-Pointer" method.
- Reader: Reads everything in the array.
- Writer: Writes selectively.

/-- Example --/

nums : [0, 1, 2, 2, 3, 0, 4, 2]
val : 2

(With WHILE Loop)

1. Reader and Writer starts from the first element.
2. If the nums[r] is equal to the given val:
      - Increment reader by 1.
3. Else if the nums[r] is not equal to the given val:
      - Replace the nums[writer] with nums[reader] value.
      - Increment reader by 1.
      - Increment writer by 1.

(With FOR Loop)

- Reader increment will be taken care by the for loop condition. Idea stays the same.
- Each element will be replaced by itself but the operation is performed acoording to need. 


1) R & W on 0 : 0 != 2 : shift both pointers right
2) R & W on 1 : 1 != 2 : shift both pointers right
3) R & W on 2 : 2 == 2 : Keep W in the same place and shift R right
4) R on 2(second) & W on 2(first) : Keep W in the same place and shift R right
5) R on 3 & W on 2(first) : Replace W(2) with R(3)
6) R on 0 & W on 2(second) : Replace W(2) with R(0)
7) R on 4 & W on 3 : Replace W(3) with R(4)
8) R on 2 & W on 0 : 2 == 2 : shift both pointers right
9) End of Array : Return Write count.

































