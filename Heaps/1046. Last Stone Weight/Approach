You are given an array of integers stones where stones[i] is the weight of the ith stone.
We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.
Return the weight of the last remaining stone. If there are no stones left, return 0.

Example 1:
Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.

Example 2:
Input: stones = [1]
Output: 1

Constraints:
1 <= stones.length <= 30
1 <= stones[i] <= 1000
___________________________________

SOLUTION

1. Use a min-heap but insert negative values to simulate a max-heap (because Java’s PriorityQueue is min by default).
2. Add all stone weights as negative numbers into the heap.
3. While there is more than one stone left:
    Remove the two heaviest stones (first and second).
    If they’re not equal, insert the difference back (as negative to maintain max-heap behavior).
4. If no stones are left, add a 0 to avoid empty heap access.
5. Return the absolute value of the top of the heap, which represents the last remaining stone’s weight.

TIME: O(n log n)
SPACE: O(n)
