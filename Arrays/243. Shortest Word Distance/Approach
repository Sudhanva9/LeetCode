Given an array of strings wordsDict and two different strings that already exist in the array word1 and word2, return the shortest distance between these two words in the list.

Example 1:
Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "coding", word2 = "practice"
Output: 3

Example 2:
Input: wordsDict = ["practice", "makes", "perfect", "coding", "makes"], word1 = "makes", word2 = "coding"
Output: 1

Constraints:
2 <= wordsDict.length <= 3 * 104
1 <= wordsDict[i].length <= 10
wordsDict[i] consists of lowercase English letters.
word1 and word2 are in wordsDict.
word1 != word2
_____________________________________________

SOLUTION

1. Initialize two pointers to track the latest positions of word1 and word2.
2. Set the initial minimum distance to the length of the array.
3. Loop through the array of words.
4. If the current word matches word1, update its position.
5. If it matches word2, update its position.
6. If both words have been seen, compute the distance between their positions.
7. Update the minimum distance if the current one is smaller.
8. After the loop, return the minimum distance found.

TIME: O(n)
SPACE: O(1)
