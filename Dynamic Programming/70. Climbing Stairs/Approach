You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
1 <= n <= 45
_____________________________

SOLUTION

1. You want to find how many ways you can climb n stairs, moving either 1 or 2 steps at a time.
2. Start from step 0 and recursively try both options: climb 1 step or climb 2 steps.
3. If the current step exceeds n, return 0 (invalid path).
4. If the current step equals n, return 1 (valid path).
5. Use a memoization array (memo[]) to store the number of ways from each step to avoid recomputing.
6. At each step i, store the result of climbStairs(i+1, n) + climbStairs(i+2, n) in memo[i].
7. Return the final answer from step 0.

TIME: O(n)
SPACE: O(n)
