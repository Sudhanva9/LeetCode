Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Constraints:

The number of nodes in the tree is n.
1 <= k <= n <= 104
0 <= Node.val <= 104
_____________________________________________

SOLUTION

IN-ORDER TRAVERSAL -

1. Create a list arr to store the tree's values in sorted order.
2. Perform an in-order traversal (Left → Root → Right) using the dfs function.
3. During traversal:
    Recursively visit the left subtree.
    Add the current node's value to arr.
    Recursively visit the right subtree.
4. Since in-order traversal of a BST gives sorted values, the k-th smallest element will be at index k - 1 in arr.
5. Return arr.get(k - 1).

TIME: O(n)
SPACE: O(n)
