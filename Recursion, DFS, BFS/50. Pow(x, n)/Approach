Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:

-100.0 < x < 100.0
-231 <= n <= 231-1
n is an integer.
Either x is not zero or n > 0.
-104 <= xn <= 104
________________________________________

SOLUTION

1. Define a function myPow(x, n) to compute 𝑥 ^ n.
2. Use Math.abs(n) to handle negative exponents.
3. If n is positive, return the result of calc(x, n).
4. If n is negative, return 1 / calc(x, -n).
5. Define calc(x, n) to recursively compute the power:
      Base case: If n == 0, return 1.
      If x == 0, return 0 (to prevent unnecessary calculations).
      Recursively compute res = calc(x, n / 2).
      Square res (i.e., res = res * res).
      If n is odd, multiply res by x to account for the extra factor.
6. Return the final result.

TIME: O(log n)
SPACE: O(log n)
