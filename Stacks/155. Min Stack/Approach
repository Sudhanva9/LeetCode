Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
Implement the MinStack class:
MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
You must implement a solution with O(1) time complexity for each function.

Example 1:
Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
 
Constraints:
-231 <= val <= 231 - 1
Methods pop, top and getMin operations will always be called on non-empty stacks.
At most 3 * 104 calls will be made to push, pop, top, and getMin.
___________________________________

SOLUTION

1. Use two stacks: one for storing all values (stack) and one for tracking the minimum values (minStack).
2. When push(val) is called:
    Add the value to the main stack.
    Also push it to minStack only if it's smaller than or equal to the current minimum.
3. When pop() is called:
    Remove the top from stack.
    If the popped value is equal to the top of minStack, also pop from minStack.
4. The top() method simply returns the top value from the main stack.
5. The getMin() method returns the top of the minStack, which is always the current minimum in the main stack.

TIME: O(1)
SPACE: O(n)
