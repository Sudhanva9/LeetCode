Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

Example 1:

Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]
Example 2:

Input: nums = [1], k = 1
Output: [1]
 
Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

------------------------------------------------------------------------------------------------------------------------------

METHOD 1: [T: O(n log n), S: O(n)] - SORTING

1. Create a HashMap for storing Keys.
2. Count the no.of times it occurs as keys for each of the distinct elements.
3. Sort the keys.
4. Return the top 'k' numbers.


METHOD 2: [T: O(nlogk), S: O(n + k)] - HEAP

Repeat steps 1 & 2.
3. Use Max Heap
    - Add each pair to the MaxHeap.
4. Pop 'k' times.


METHOD 3: [T: O(n), S: O(n)] - BUCKET SORT

Repeat steps 1 & 2.
3. Use Bucket Sorting.
    a. Create an array with a length the same as the input array.
    b. Consider that the indices of the new array are the frequencies.
    c. In the values of the array, create a sub-array and add all the nums to that sub-array based on their frequency.
4. Start from right to left while returning the 'k' numbers as the highest frequent number is stationed at the end of the array.





