Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.

Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Constraints:

n == nums.length
1 <= n <= 300
nums[i] is either 0, 1, or 2.
__________________________________________

SOLUTION

Dutch National Flag Algorithm - 
(BUCKET SORT / QUICK SORT)

1. Initialize Pointers:
    l (left pointer) → Tracks the boundary for 0s.
    r (right pointer) → Tracks the boundary for 2s.
    i (current index) → Iterates through the array.

2. Iterate Through the Array:
  - If nums[i] == 0:
    Swap nums[i] with nums[l] (move 0 to the left).
    Increment l (expand the 0 region).

  - If nums[i] == 2:
    Swap nums[i] with nums[r] (move 2 to the right).
    Decrement r (shrink the 2 region).
    Decrease i by 1 to recheck the swapped value.

  - Always increment i in each step.

Why This Works?
    In-place Sorting (No extra space used).
    Single Pass (O(n)): Each element is processed at most once.
    Efficiently Sorts 0s, 1s, and 2s without extra loops.


TIME: O(n)
SPACE: O(1)
