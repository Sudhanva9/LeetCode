Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.
You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 
Example 1:
Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')
 
Constraints:
0 <= word1.length, word2.length <= 500
word1 and word2 consist of lowercase English letters.
____________________________________________

SOLUTION

1. Create a 2D dp array where dp[i][j] represents the minimum number of operations to convert the substring word1[i:] to word2[j:].
2. Fill the last row: converting the rest of word1 to empty word2 needs deletions.
3. Fill the last column: converting empty word1 to the rest of word2 needs insertions.
4. Loop backwards from the end of both words to the start.
5. If characters at position i and j are the same, no operation is needed — carry over the diagonal value.
6. Otherwise, take the minimum of:
      Delete from word1 → move down.
      Insert into word1 → move right.
      Replace a character → move diagonally. Add 1 to the minimum since one operation is used.
7. Return dp[0][0] as the minimum operations to convert the full word1 to word2.

TIME: O(n * m)
SPACE: O(n * m)
