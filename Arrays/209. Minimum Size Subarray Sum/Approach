Given an array of positive integers nums and a positive integer target, return the minimal length of a 
subarray whose sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.
Example 2:

Input: target = 4, nums = [1,4,4]
Output: 1
Example 3:

Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0
 
Constraints:

1 <= target <= 109
1 <= nums.length <= 105
1 <= nums[i] <= 104
_____________________________________________________________

SOLUTION

SLIDING WINDOW - 

1. Our subarray's 'sum' should be grater than or equal to the given 'target' AND the length of that subarray should be as minimum as possible.
2. Declare a Left pointer, L and the Right pointer, R, is taken care by the loop. The initial 'sum' will be 0. The default 'length' will be the declared as the MAX_VALUE as we are going to find the minimum length.
3. Iterating through the given array, 
    - If the 'sum' is greater than or equal to the 'target'
        1) length = minimum value of (R-L) or length itself.
        2) Subtract the left most value.
        3) Increment the L pointer by 1.
4. Return ther length, if the length is MAX_VALUE, return 0, else return the length.

TIME: O(n)
SPACE: O(1)
