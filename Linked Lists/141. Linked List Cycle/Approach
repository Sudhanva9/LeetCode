Given head, the head of a linked list, determine if the linked list has a cycle in it.
There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
Return true if there is a cycle in the linked list. Otherwise, return false.

Example 1:

Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
Example 2:

Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
Example 3:

Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.

Constraints:

The number of the nodes in the list is in the range [0, 104].
-105 <= Node.val <= 105
pos is -1 or a valid index in the linked-list.
____________________________________________________________________

SOLUTION

FLOYD'S TORTOISE & HARE ALGORITHM

1. Use a Slow (Increments by 1 position) and Fast (Increments by 2 positions) pointer that runs through the given list.
2. If the list is not cyclic, the Fast pointer reaches the end of the list/null first. Then, return false.
3. Else if the list is cyclic, the Fast pointer will eventually catch up to the Slow pointer. 
4. When the Fast and Slow pointers meet, it is evident that the given list is cyclic.
5. So, return true.

TIME: O(n)
SPACE: O(1)

HASH-SET 

1. Track if the visited node is already present in the HashSet. If it is, return true.
2. Else if it reaches the end of the list, return false.
Note: We do not add the value of the node to our Hashset, but the node itself. This is because there could be duplicate values in the list.

TIME: O(n)
SPACE: O(n)
