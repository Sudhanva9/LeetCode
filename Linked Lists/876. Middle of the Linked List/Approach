Given the head of a singly linked list, return the middle node of the linked list.
If there are two middle nodes, return the second middle node.

Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.

Constraints:
The number of nodes in the list is in the range [1, 100].
1 <= Node.val <= 100
______________________________

SOLUTION

FAST & SLOW POINTERS

1. Use two pointers: slow and fast, both starting at the head.
2. Move slow one step at a time.
3. Move fast two steps at a time.
4. When fast reaches the end of the list, slow will be at the middle.
5. Return the slow pointer as the middle node.

TIME: O(n)
SPACE: O(1)
