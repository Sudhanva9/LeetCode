You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 
Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.
___________________________________________________

SOLUTION

1. Use a dummy node to simplify list construction.
2. Iterate through both linked lists (l1 and l2):
    Extract the values (v1, v2) from each node or use 0 if the list is shorter.
    Compute sum = v1 + v2 + carry.
    Set carry = sum / 10 and keep only sum % 10 for the current node.
    Move to the next nodes (l1 and l2).
3. Handle remaining carry: If carry is non-zero after processing both lists, add a new node with carry.
4. Return dummy.next, which is the head of the resulting sum list.

TIME: O(m + n)
SPACE: O(1)
