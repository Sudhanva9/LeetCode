Given a string s which represents an expression, evaluate this expression and return its value. 
The integer division should truncate toward zero.
You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].
Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

Example 1:
Input: s = "3+2*2"
Output: 7

Example 2:
Input: s = " 3/2 "
Output: 1

Example 3:
Input: s = " 3+5 / 2 "
Output: 5

Constraints:

1 <= s.length <= 3 * 105
s consists of integers and operators ('+', '-', '*', '/') separated by some number of spaces.
s represents a valid expression.
All the integers in the expression are non-negative integers in the range [0, 231 - 1].
The answer is guaranteed to fit in a 32-bit integer.
______________________________________________________

SOLUTION

WITHOUT STACK:

1. If the input string is empty or null, return 0.
2. Initialize variables to track the current number, last number, result, and the last operation.
3. Loop through each character in the string:
      If the character is a digit, update currentNumber by multiplying the previous value by 10 and adding the digit.
      If the character is an operator (+, -, *, /) or the last character:
          If the last operation was + or -, add lastNumber to the result and update lastNumber based on the current number.
          If the last operation was * or /, update lastNumber by performing the operation.
          Set the new operation and reset currentNumber to 0.
4. After the loop, add lastNumber to the result.
5. Return the final result.

TIME: O(n)
SPACE: O(1)
