Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

Example 1:
Input: n = 3
Output: ["((()))","(()())","(())()","()(())","()()()"]

Example 2:
Input: n = 1
Output: ["()"]

Constraints:
1 <= n <= 8
_______________________________

SOLUTION

Create a list to store all valid combinations of parentheses.
Use a backtracking function to explore all possible valid sequences.
Maintain a StringBuilder as a stack to keep track of the current combination.
If the number of open and closed parentheses equals n, a valid combination is formed â€” add it to the result list.
If the number of open parentheses is less than n, add '(' to the combination and recurse.
If the number of closed parentheses is less than open parentheses, add ')' to the combination and recurse.
After each recursive call, remove the last character to backtrack and explore other possibilities.

TIME: O(2^n)
SPACE: O(n)
