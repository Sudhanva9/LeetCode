Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:

[4,5,6,7,0,1,2] if it was rotated 4 times.
[0,1,2,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums of unique elements, return the minimum element of this array.
You must write an algorithm that runs in O(log n) time.

Example 1:

Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.
Example 2:

Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.
Example 3:

Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 
_____________________________________________________________________________

SOLUTION

1. Initialize res with the first element of the array.
2. Set l (left pointer) to the start and r (right pointer) to the end of the array.
3. Use a while loop to perform binary search while l <= r.
4. If nums[l] < nums[r], it means the subarray is already sorted, so update res with nums[l] and break.
5. Find the middle element using mid = l + (r - l) / 2.
6. Update res with the minimum value between res and nums[mid].
7. If nums[mid] >= nums[l], it means the left half is sorted, so move l to mid + 1 to search in the right half.
   Else, move r to mid - 1 to search in the left half.
8. Return res as the minimum element in the rotated sorted array.

TIME: O(log n)
SPACE: O(1)
