Given a string s, find the length of the longest substring without duplicate characters.

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
___________________________________________________

SOLUTION

SLIDING WINDOW - 

1. To check the duplicate characters, HashSet can be used. Declare a Left pointer 'L' that starts from 0th position and a counter, 'res' = 0.
2. Iterating the Right pointer, 'R', through the string 's', 
     While set already contains the charAt[R],
      - Remove the Left most character,
      - Increment the L pointer by 1.
3. If the set doesn't contain the charAt[R], add it to the set.
4. Update the 'res' with a Max value of either (R - L + 1) or 'res'.
5. Return the result, 'res'.

Time: O(n)
Space: O(n)
