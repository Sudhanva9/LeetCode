You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists into one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: list1 = [], list2 = []
Output: []
Example 3:

Input: list1 = [], list2 = [0]
Output: [0]

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.
___________________________________________________________

SOLUTION

1. Iterating through both Linked Lists, 
    If the List1 val is < List2 val: add the List1 val to the new list AND Increment the List1 to next node. 
    Else if the List2 val is < List2 val: add the List2 val to the new list AND Increment the List2 to next node.
2. Increment the result node to next.
3. At the end, if either of the Lists is completed and the other has nodes left, add the leftover nodes to the result list.
    If L1 != null: node.next  = L1, else node.next = L2.
4. Return dummy.next.

TIME: O(n + m)
SPACE: O(1)

Where n is the length of list and m is the length of list2.
