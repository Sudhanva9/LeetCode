You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj]. Each list of intervals is pairwise disjoint and in sorted order.
Return the intersection of these two interval lists.
A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.
The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of [1, 3] and [2, 4] is [2, 3].

Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
Output: []
 
Constraints:
0 <= firstList.length, secondList.length <= 1000
firstList.length + secondList.length >= 1
0 <= starti < endi <= 109
endi < starti+1
0 <= startj < endj <= 109 
endj < startj+1
___________________________________________

SOLUTION

TWO POINTERS:

1. Start with two pointers, i and j, each pointing to the beginning of the two interval lists.
2. At every step, compare firstList[i] and secondList[j]:
    Find the overlapping range (if any) by computing:
        low = max(start times)
        high = min(end times)
    If low <= high, an intersection exists → add it to the result.
3. Move the pointer of the interval which ends first:
    This ensures you don’t miss any future overlaps.
4. Repeat until one of the lists is fully traversed.
5. Convert result list to array and return it.

TIME: O(M+N)
SPACE: O(M+N)
