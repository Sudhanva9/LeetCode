The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.
For example, for arr = [2,3,4], the median is 3.
For example, for arr = [2,3], the median is (2 + 3) / 2 = 2.5.

Implement the MedianFinder class:
MedianFinder() initializes the MedianFinder object.
void addNum(int num) adds the integer num from the data stream to the data structure.
double findMedian() returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.
 
Example 1:
Input
["MedianFinder", "addNum", "addNum", "findMedian", "addNum", "findMedian"]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]

Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0

Constraints:

-105 <= num <= 105
There will be at least one element in the data structure before calling findMedian.
At most 5 * 104 calls will be made to addNum and findMedian.
______________________________________________________________

SOLUTION

1. Use two heaps:
    A max heap (smallHeap) stores the smaller half of numbers.
    A min heap (largeHeap) stores the larger half of numbers.
2. Adding a number:
    First, add the number to smallHeap (max heap).
    If smallHeap has more elements than largeHeap or the smallest element in largeHeap is smaller than the largest in smallHeap, move an element to largeHeap.
    If largeHeap has more elements than smallHeap, move an element back to smallHeap.
3. Finding the median:
    If both heaps have the same size, return the average of the two top elements.
    Otherwise, return the top of the heap with more elements.


TIME: O(log n) for AddNum & O(1) for FindMedian.
Space: O(n)
