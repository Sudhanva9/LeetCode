Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.
The same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.
The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Constraints:

1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40
________________________________________________

SOLUTION

1. Start with an empty list cur and call backtrack with target.
2. If target == 0, we found a valid combination, so add it to res and return.
3. If target < 0 or we've checked all numbers, return (base case).
4. Pick the current number (nums[i]) and add it to cur.
5. Recursively call backtrack with the same index (we can reuse numbers).
6. Backtrack: Remove the last number from cur to explore other options.
7. Move to the next number and call backtrack again.
8. Repeat until all possible combinations are explored.

TIME: O(2(t/m))
SPACE: O(t/m)

Where t is the given target and mm is the minimum value in nums.
