Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].

Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104
_____________________________________

SOLUTION

1. Sort the intervals by their starting values to ensure they are in order.
2. Use a list (res) to store merged intervals.
3. Iterate through each interval:
      If res is empty or there is no overlap with the last interval in res, add the interval.
      If there is an overlap, merge the intervals by updating the end value.
4. Convert the list to an array and return it.

TIME: O(n log n) - sorting and iterating through all the elements of intervals.
SPACE: O(n) - 
        
        O(1) or O(n) space depending on the sorting algorithm. O(n) for the output list.
