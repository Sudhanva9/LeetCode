Given the root of a binary tree, return the length of the diameter of the tree.
The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.
The length of a path between two nodes is represented by the number of edges between them.

Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].

Example 2:
Input: root = [1,2]
Output: 1

Constraints:

The number of nodes in the tree is in the range [1, 104].
-100 <= Node.val <= 100
___________________________________________________

SOLUTION

1. If the tree is empty, the diameter is 0.
2. Use a helper function dfs() to find the depth of each node.
3. For each node:
    - Recursively find the left and right subtree depths.
    - Update the diameter (res[0]) as left + right (longest path through this node).
4. Return 1 + max(left, right) to account for the current node in depth calculation.
5. The final diameter is stored in res[0].

TIME: O(n)
SPACE: O(n) - Recursive Stack
