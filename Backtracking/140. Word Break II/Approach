Given a string s and a dictionary of strings wordDict, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.
Note that the same word in the dictionary may be reused multiple times in the segmentation.

Example 1:
Input: s = "catsanddog", wordDict = ["cat","cats","and","sand","dog"]
Output: ["cats and dog","cat sand dog"]
 
Example 2:
Input: s = "pineapplepenapple", wordDict = ["apple","pen","applepen","pine","pineapple"]
Output: ["pine apple pen apple","pineapple pen apple","pine applepen apple"]
Explanation: Note that you are allowed to reuse a dictionary word.

Example 3:
Input: s = "catsandog", wordDict = ["cats","dog","sand","and","cat"]
Output: []

Constraints:
1 <= s.length <= 20
1 <= wordDict.length <= 1000
1 <= wordDict[i].length <= 10
s and wordDict[i] consist of only lowercase English letters.
All the strings of wordDict are unique.
Input is generated in a way that the length of the answer doesn't exceed 105.
_____________________________________

SOLUTION

1. Convert the word dictionary into a Set for quick lookup.
2. Use backtracking to explore all possible ways to split the input string s.
3. Start from index 0 and try all substrings s[i..j] that exist in the dictionary.
4. If a valid word is found, add it to the current path.
5. Recursively continue from the next index j + 1.
6. If the end of the string is reached, join the current path with spaces and add to the result list.
7. After exploring one path, remove the last word to backtrack and try other possibilities.
8. Return the final list of all valid sentence combinations.

TIME: O(2^n)
SPACE: O(2^n)
