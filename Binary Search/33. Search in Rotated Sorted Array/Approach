There is an integer array nums sorted in ascending order (with distinct values).
Prior to being passed to your function, nums is possibly rotated at an unknown pivot index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].
Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

Constraints:

1 <= nums.length <= 5000
-104 <= nums[i] <= 104
All values of nums are unique.
nums is an ascending array that is possibly rotated.
-104 <= target <= 104
________________________________________________________________

SOLUTION

Initialize Pointers:

1. Use two pointers, l (left) and r (right), to define the search space.
    l starts at 0, and r starts at nums.length - 1.
    Perform Binary Search:
2. Calculate the middle index: mid = (l + r) / 2.
    If nums[mid] is the target, return mid.
    Identify the Sorted Half:
3. If the left half (nums[l] to nums[mid]) is sorted:
4. Check if the target is outside this range (target > nums[mid] || target < nums[l]).
    If outside, search in the right half (l = mid + 1), else search in the left (r = mid - 1).
    Otherwise, the right half (nums[mid] to nums[r]) must be sorted:
5. Check if the target is outside this range (target < nums[mid] || target > nums[r]).
    If outside, search in the left half (r = mid - 1), else search in the right (l = mid + 1).
    Repeat Until Target is Found or l > r:
6. If found, return the index; otherwise, return -1 if the loop ends.

TIME: O(n log n)
SPACE: O(1)
