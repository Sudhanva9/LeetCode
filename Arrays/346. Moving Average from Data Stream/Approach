Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.
Implement the MovingAverage class:
MovingAverage(int size) Initializes the object with the size of the window size.
double next(int val) Returns the moving average of the last size values of the stream.

Example 1:
Input
["MovingAverage", "next", "next", "next", "next"]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]

Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3
 
Constraints:

1 <= size <= 1000
-105 <= val <= 105
At most 104 calls will be made to next.
________________________________________________

SOLUTION

DEQUE / SLIDING WINDDOW - 

1. Initialize the class:
    Store size (maximum window size).
    Use a deque (window) to keep track of the last size elements.
    Maintain a running sum of elements in the window.

2. Process each new value:
    Add val to the deque.
    If the deque exceeds size, remove the oldest element.
    Update sum accordingly.
    Compute and return the moving average (sum / window size).

Key Idea:
    Efficiently maintains a rolling sum, avoiding recalculating the entire sum every time.
    Deque ensures O(1) insertion and removal.

TIME: O(1)
SPACE: O(n)
